#!/bin/bash
# Wrapper around mypy/pytest/flake8 for python, and shellcheck/shfmt for bash
# pauses at each step if there are errors
cd "$(realpath "$(dirname "${BASH_SOURCE[0]}")")" || {
	echo "Couldn't cd to current dir"
	exit 1
}

readonly FLAKE8_IGNORE='E225,E501,E302,E402,E305,E261,E265,E116,E252,E702,E266,E741,E306,E203,E731,W503'
readonly FLAKE8_FILES_IGNORE="*polar.py,*kython*,*stackexchange.py,*core/common.py,*core/init.py,*core/__init__.py,*config/__init__.py"

list_shell_scripts() {
	echo bootstrap
	echo lint
	echo bgproc
	fd '.job' jobs
	fd . setup_scripts
}

# call shellcheck on all the scripts
shellcheck_scripts() {
	local SUCCESS='true'
	while IFS=$'\n' read -r shell_script; do
		shellcheck "$shell_script" || SUCCESS='false'
	done < <(list_shell_scripts)
	# If all the shellchecks succeeded
	if [[ "$SUCCESS" == 'true' ]]; then
		shfmt_scripts_in_place
	else
		echo "One or more shellcheck invocations returned false, skipping shfmt..."
	fi
}

# call shfmt on multiple files
shfmt_scripts_in_place() {
	local COUNT=0
	while IFS=$'\n' read -r shell_script; do
		((COUNT++))
		shfmt "$shell_script" >/tmp/shfmt-temp && cat /tmp/shfmt-temp >"$shell_script"
	done < <(list_shell_scripts)
	echo "$(tput setaf 2)Ran shfmt on $COUNT files$(tput sgr0)"
}

# remove temporary firefox dbs from previous runs
# fills up /tmp and causes storage issues otherwise
cleanup_firefox() {
	echo "Cleaning up old firefox databases..."
	find /tmp -iname "places*sqlite" -delete -print 2>/dev/null
}

prompt() {
	local MESSAGE
	MESSAGE="${1:-Hit enter to continue > }"
	echo -en "$(tput setaf 1)${MESSAGE}$(tput sgr0)"
	read -r # if no variable is specified, sets the REPLY environment variable
}

custom_pyflakes() {
	local FLAKE8_OUTPUT FLAKE8_OUTPUT_LENGTH
	printf "Running pyflakes with:\nignored rules: %s\nIgnored file patterns:\n%s\n" "$FLAKE8_IGNORE" "$(tr ',' '\n' <<<"$FLAKE8_FILES_IGNORE")"
	# capture flake8 output so I can determine whether or not there were lines returned
	# if there were return 1, so it prompts to wait while I look at the error
	FLAKE8_OUTPUT="$(find my -iname '*.py' -exec flake8 --ignore="$FLAKE8_IGNORE" --extend-exclude="$FLAKE8_FILES_IGNORE" {} +)"
	FLAKE8_OUTPUT_LENGTH="$(wc -c <<<"$FLAKE8_OUTPUT")"
	# ignore newlines/spaces for some reason, all errors will have string length > 5
	if ((FLAKE8_OUTPUT_LENGTH > 5)); then
		printf '%s\n' "$FLAKE8_OUTPUT"
		return 1
	else
		return 0
	fi
}

prompt_black() {
	# if black returns error code, prompt to autoformat
	fd '.py$' -E setup.py -X black --check || {
		prompt "Run black autoformat (N/y)? "
		case "$REPLY" in
		y | Y)
			fd '.py$' -E setup.py -X black
			;;
		*) ;;

		esac
	}
}

main() {
	custom_pyflakes || prompt
	pytest "$@" || prompt
	echo "Running mypy..."
	mypy --color-output --ignore-missing-imports ./my || prompt
	echo "Checking python formatting..."
	prompt_black
	echo "Running shellcheck..."
	shellcheck_scripts
	echo -e "$(tput setaf 2)Done!$(tput sgr0)"
	git status
}

cleanup_firefox
main "$@"
