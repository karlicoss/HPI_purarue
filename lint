#!/bin/bash
# wrapper around linter/formatters
# pauses at each step if there are errors
cd "$(realpath "$(dirname "${BASH_SOURCE[0]}")")" || {
	echo "Couldn't cd to current dir"
	exit 1
}

readonly FLAKE8_IGNORE='E225,E501,E302,E402,E305,E261,E265,E116,E252,E702,E266,E741,E306,E203,E731,W503'
readonly FLAKE8_FILES_IGNORE="*polar.py,*core/cachew.py,*konsume*,*stackexchange.py,*core/common.py,*core/init.py,*core/__init__.py,*config.py,*food/__init__.py,*coding/__init__.py"

# call shellcheck on all the scripts
shellcheck_scripts() {
	git ls-files | rifleman - -a lint -j | jq -r 'to_entries[] | select(.key|startswith("shellcheck")) | .value | .[]' | xargs shellcheck
}

# remove temporary firefox dbs from previous runs
# fills up /tmp and causes storage issues otherwise
cleanup_firefox() {
	echo "Cleaning up old firefox databases..."
	find /tmp -iname "places*sqlite" -delete -print 2>/dev/null
}

prompt() {
	local MESSAGE
	MESSAGE='Hit enter to continue > '
	[[ -n "$1" ]] && MESSAGE="$1"
	echo -en "$(tput setaf 1)${MESSAGE}$(tput sgr0)"
	read -r # if no variable is specified, sets the REPLY environment variable
}

custom_flake8() {
	local FLAKE8_OUTPUT FLAKE8_OUTPUT_LENGTH
	printf "Running flake8 with:\nignored rules: %s\nIgnored file patterns:\n%s\n" "${FLAKE8_IGNORE}" "$(tr ',' '\n' <<<"${FLAKE8_FILES_IGNORE}")"
	# capture flake8 output so I can determine whether or not there were lines returned
	# if there were return 1, so it prompts to wait while I look at the error
	FLAKE8_OUTPUT="$(find my -iname '*.py' -exec flake8 --ignore="${FLAKE8_IGNORE}" --extend-exclude="${FLAKE8_FILES_IGNORE}" {} +)"
	FLAKE8_OUTPUT_LENGTH="$(wc -c <<<"${FLAKE8_OUTPUT}")"
	# ignore newlines/spaces for some reason, all errors will have string length > 5
	if ((FLAKE8_OUTPUT_LENGTH > 5)); then
		printf '%s\n' "${FLAKE8_OUTPUT}"
		return 1
	else
		return 0
	fi
}

main() {
	custom_flake8 || prompt ''
	pytest "$@" || prompt ''
	cleanup_firefox
	echo "Running mypy..."
	mypy --color-output --ignore-missing-imports ./my || prompt ''
	echo "Running shellcheck..."
	shellcheck_scripts
	# format everything in the repo
	git ls-files | rifleman -
	echo -e "$(tput setaf 2)Done!$(tput sgr0)"
	git status
}

main "$@"
